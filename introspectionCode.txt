schemaquery.js
const fetch = require('node-fetch');
const fs = require('fs');

fetch(`https://api.example.com/graphql`, {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    variables: {},
    query: `
      {
        __schema {
          types {
            kind
            name
            possibleTypes {
              name
            }
          }
        }
      }
    `,
  }),
})
  .then(result => result.json())
  .then(result => {
    // here we're filtering out any type information unrelated to unions or interfaces
    const filteredData = result.data.__schema.types.filter(
      type => type.possibleTypes !== null,
    );
    result.data.__schema.types = filteredData;
    fs.writeFileSync('./src/fragmentTypes.json', JSON.stringify(result.data), err => {
      if (err) {
        console.error('Error writing fragmentTypes file', err);
      } else {
        console.log('Fragment types successfully extracted!');
      }
    });
  });

=============================================
Step 2: Pass the fragmentTypes to InMemoryCache
Go to the file where you initialise apollo client cache and type in the following code :

import {IntrospectionFragmentMatcher} from 'apollo-cache-inmemory';
import introspectionQueryResultData from '../../../src/fragmentTypes.json';
const fragmentMatcher = new IntrospectionFragmentMatcher({
introspectionQueryResultData
});

Note: The path for fragmentTypes.json file needs to be the same as step 1.
Now, pass the fragmentMatcher with schema data to Apollo’s InMemoryCache as follows:
cache: new InMemoryCache({fragmentMatcher})
After you have added all the above code, your file should look something like this 

import ApolloClient from 'apollo-client';
import { InMemoryCache } from 'apollo-cache-inmemory';
import { HttpLink } from 'apollo-link-http';
import { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';
import introspectionQueryResultData from './fragmentTypes.json';

const fragmentMatcher = new IntrospectionFragmentMatcher({
  introspectionQueryResultData
});

const cookies = new Cookies();
const httpLink = new HttpLink({ uri: 'https://api.example.com/graphql' })
const cache = new InMemoryCache({ fragmentMatcher });

export const client = new ApolloClient({
  cache,
  link: new HttpLink(),
});

Step 3: Build and fetch the Schema object into fragmentTypes.json
Using node, in package.json set up a build script for querying the schema and writing it in fragmentTypes.json file. For example:

 "build-fragment” : “node src/schemaQuery.js”
Run “npm run build-fragment” and let the magic happen!
The fragmentTypes.json file gets created and all your schema information related to unions and interfaces are stored as an object.
Optional step : Set the schemaQuery.js script to run at build time
To introspect the server every time we build the project, it is recommended to run a parallel node thread for your “start” script in package.json as follows :
“start”: “ npm-run-all -p start-server build-fragment”,
“start-server”: “node server.js”,
“build-fragment”: “node src/schemaQuery.js”
Now, running “npm run start” will trigger both your node server and the schemaQuery script that we just added.
