•	• Schema, Object, Scalar, & List Types

get the graph of our data graphql using schemas
schemas include types of fields
id,name,price
schemas specifies exactly which queris and mutations which are available for clients to execute =when data graph is getting

type Book{
	title:String
	author:Author
}
 type Author{
	name:String
	book:[Book]
}

schema supports:
Scalar types:Int,float,String,boolean ,ID
object types
query type
mutation
input type
enum type

Object types:

type Book{
	title:String
	author:Author
         }
 type Author{
	name:String
	book:[Book]
	    }
=============================================
The query type:

type Query{
	books:[Book]
	authors:[Author]
	 }

/apiname/books  /api/employees  api/authors
//to fetch detail of employee and depts

query GetEmployeewithDepartment{
	employees{
		id
		empname
		}
	departments{
		dptid
		deptname
		}
}

{
  "data": {
    "employees": [
		{
			"id":"1023",
		
			"empname"
		},]
  "departments":[{
			"dptid":"1023",
		
			"deptname":"IT"
		}
  },]
}

=======================================

Mutation type:

Mutation is similar to structire 

query type defines entry points for read operations, the mutation defines entry points for write operations.

type Mutation{
	addEmployee(ID :String, name: String) : Employees
	    }

mutation CreateListEmployees{
	addEmployee(ID :"1189", name: "Mr. Sunil"){
		ID
		name{

                     }

		}
====================================================
{
  "data": {
    "addEmployee": {
	"ID":"1189",
	"name:"Sunil" 
	   }
======================================================================
input types

special object types which can pass objects as arguments to queries and mutation


type Mutation{
	createLeague(title:String, description:String, memberid: String): League
	     }	

input League{
	title:String
	description:String
	memberid:String
	}

==============================================

enum types:

enum rainbowcolor{
		RED
		GREEN
		BLUE
		VIOLET
		ORANGE
		INDIGO
		YELLOW
		}

type Query{
	dresscolour: rainbowcolor
	housecolor(wallcolor:rainbowcolor):String
	}

query Gethousecolor{
		housecolour(wallcolor:YELLOW)
		}
